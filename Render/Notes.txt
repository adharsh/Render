


******
TODOS:

Bugs:
*binding textures and unbinding textures, renderable class and stuff
*doesn't load all meshes without textures, just a color
*cubemaps
*light deflection + refraction thing

hud - text + fonts, other interactable stuff
sounds
browser

fix change fov scroll in
const texture color parameter thing
camera->getTransform()
change scrolling so it stays the same even when cursor is out of focus

undestand directions of placement of putting stuff in space...you get what I mean

input stuff
function callback setups
Camera class
-input all convenient
-has projection, view, and model
-input method shoudl just have camera.input(), and update method should just have camera.update, proejection and view and model if possible
-getters for each
-mouse input fov
-fov 45 or 90?

passing Tim::getDelta() as a double vs a float vs something even more accurate

doesn't load all meshes without textures, just a color

Not necessary to do pointlights/spot lights, just as final touches
-way to organize point lights in vector -> 
getters for position
popthem off
add them back on
-pointlights don't entirely work

spot lights

******
Fixes:

change up all the paramters and make them const stuff
getters return const stuff


indices Mesh addData

binding and unbinding textures

references by Texture Class

fragmentshader.fs todo, should i use glEnable(GL_TEXTURE2D) and glDisable(GL_TEXTURE2D)

replace input() todo

change up PhongShader and make it a singleton class
make private variables all static

Watch Companion Video on Lighting
Make-> float diffuseFactor = dot(direction, normal); //to see what happens, opposite shading?

Control k+d for all files

Optimize calculations for Mesh.cpp, instead of copying and pasting, do it all at once

draw() method for Mesh excluding use of normals too

change location of uniform variables in phongFragment.fs

phongFragment todo

refactor shader class so methods are all overloaded setUniform
change shader char* parameters to std::string&

make get methods return const values

rename vertices to positions

rename variables in shaders to make it more comprehensible, in texturesVS, out texturesFS

Take out code in TODO in PhongShader.cpp

substitute code from generateDataMatrix() directly into addData() method in Mesh.cpp

replace data_size with positions.size() in Mesh.cpp

no uvs generated from cube.obj, why?

error generated from creating a plane

make it so that if there is not texture, set it to a single color

why does model * normal make the light stay the same with it?

Delegating constructors in Texture.cpp

change base to baselight

make specularExponent and specularPower consistent

can't make color parameter in Texture class constant, why

const method is just changing that object right, can still be changing parameter values

**********
Notes:
Window->Reset Window LayoutWindow->Reset Window Layout

Remove default constructor of Texture since its not necessary -> Make pointer if should not need to initialize when declared

filesutils.cpp: return pixels instead of return result -> Library should clean up other stuff by itself, not just variables present

okay to use new, manage memory yourself

texture = Texture("res/textures/Hi.png"); vs texture("res/textures/Hi.png"); //second has error -> Visual Studio Directory

default argument should only be present when declared, only variable (without = value) should be present in implementation

universal zero initializer -> = 0;

emplace_back() better than put_back()

const variables better than sending in a uniform in GLSL

images -> no alpha

mvp is calculated from left to right, thus mvp

*******
What to do when not drawing anything to the screen:
check uniforms
check size of each collection of data when allocating
generateDataMatrix is wrong
check if its just drawing it not on screen
check normals and vertices size 
