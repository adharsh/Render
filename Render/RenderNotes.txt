TODOS:

Priority To Do List:
*all refract/reflect single sphere, single smooth sphere, single smooth monkey, dozens of smooth toruses, single plane with text with cosmos background, then different image kernel effects, remind of last year plotting universe project, demonstrate screenshot
*check screenbuffer drawtotexture and drawtoscreen methods, make sure if need wrapper or actual
*understand what pdb's are and other visual studio files
*different order for id for each Renderable and different order for ids of renderabels in vector of Layer
*check code when to make vectors references or as objects: pass in as (const check this too) references, objects as members
*test add renderable, test variety of textures 
*check if any leaked memory -> http://swarminglogic.com/jotting/2013_10_gamedev01
*use CUDA with this
*completely understand how depth function works
*completely understand how image kernels work - http://setosa.io/ev/image-kernels/

uv map square image to sphere -> https://www.youtube.com/watch?v=yc0b5GcYl3U

use 64 bit libs and stuff -> glew64, FreeImage64, etc.

check if not used std::vector<float>& const methodName()

why does freeimage convert rawbtis have parameters for color masks that don't work?
why is methodName a thing? -> shows address of function, can be used like a variable, like in function pointers -> rev
change getwidth to width()? layer->size to getsize()? -> stl standard doesn't use getters and setters, java programmer made getters and setters -> yup
screenshot method taking multiple images, how to stop to make only one image in every 0.5 seconds -> yup
destructors being run? ex. Text.cpp -> debugger exits at a certain point, and the memory is automatically cleaned up by the OSs -> yup
Bob class in Testing project -> review in club -> yup
how come static methods when defined in cpp dont need scope operatir? FileUtils::screenshot is the same as screenshot -> must use that -> yup

*use texture map weird image and use freeimage to export into useable cubemap
	- http://virtuallyprogramming.com/Content/Content.html
	- http://wwwtyro.github.io/space-3d/
	- https://wwwtyro.github.io/space-3d/#animationSpeed=1&fov=80&nebulae=true&pointStars=true&resolution=2048&seed=4i7a4w8u1vy8&stars=true&sun=true
*http://swarminglogic.com/jotting/2013_10_gamedev01 optimization for reading and writing an obj
*fxaa - https://blog.codinghorror.com/fast-approximate-anti-aliasing-fxaa/, msaa, https://github.com/JoshuaSenouf/GLEngine/blob/master/resources/shaders/postprocess/firstpass.frag
bug: place two renderables next to each other like this: r.push_back(new Renderable(mesh, new Material(1.33f, 10.0f, glm::vec4(1.0f, 1.0f, 0.0f, 1.0f), new Texture()))); r.push_back(new Renderable(mesh, new Material(Material::REFLECT, -1.0f, glm::vec4(1.0f, 1.0f, 1.0f, 1.0f), new Texture())));, Downloads/Program/Render.exe
invert colors material option
check if normalCoord and normal is the same thing
When I pass model matrix to shader, it's actually layer.model  * renderable.model together, that's supposed to happen right?
make getters const even for data primitive types
possible to make alterRenderable() or getRenderable() more efficient?
organize renderables more efficiently in layer class -> organize by textures and organize if environmental mapping
use texture atlasing for cubemaps
use texture atlasing for multitude of images
eventually take out GLFW_KEY_ESCAPE -> exit
make Material a struct and pass in as struct data
post processing stuff -> hud - text + fonts, other interactable stuff -> https://www.opengl.org/discussion_boards/showthread.php/124875-How-to-draw-a-line-using-OpenGL-programme, https://learnopengl.com/#!In-Practice/Text-Rendering, https://learnopengl.com/#!Advanced-OpenGL/Framebuffers
msaa in OpenGL etc. -> https://learnopengl.com/#!Advanced-OpenGL/Anti-Aliasing
sounds -> https://learnopengl.com/#!In-Practice/2D-Game/Audio -> Irrklang
should game and window in Engine.h be const, should Game methods be const too, effects throughout code okay?
create a Handle class that has a "handle" on all objects like window, game, other resources, etc.
stencil testing -> glStencilOpSeparate(), https://learnopengl.com/#!Advanced-OpenGL/Stencil-testing
lighting -> https://learnopengl.com/#!Lighting/ -> change all code around
https://vulkan-tutorial.com/Loading_models optimization reading from obj -> not necessary, linear serach with memory saving, takes more processing time but less memory
*load all library stuff again cuz when I searched and and took out the inlines, it probably took and changed the library files too
browser -> http://kripken.github.io/emscripten-site/
*http://www.41post.com/5178/programming/opengl-configuring-glfw-and-glew-in-visual-cplusplus-express - to get rid of that error
change github username eventually, take out forked stuff and other stuff stuff

fix change fov scroll in
change scrolling so it stays the same even when cursor is out of focus

passing Tim::getDelta() as a double vs a float vs something even more accurate

Not necessary to do pointlights/spot lights, just as final touches
-way to organize point lights in vector -> 
getters for position
popthem off
add them back on
-pointlights don't entirely work

spot lights

******
Yups:
*export framebuffer as image https://www.opengl.org/discussion_boards/showthread.php/165852-save-opengl-buffer-with-freeimage, glReadPixels(0,0,WIDTH,HEIGHT, GL_BGR, GL_UNSIGNED_BYTE, pixels); -> yup
*understand if Game class needs pointers as member variables or as references, check other classes for similar mistake -> allocate memory for objects with permanence -> yup
*double check if properly unbinding textures in Layer class -> yup
*make sure proper deletion for all opengl objects stuff -> yup
*game quit method that affects Engine class -> yup
*multiple objects reflection/refraction -> framebuffer?, no not framebuffer -> nah we're not gonna do it, just use dotted cubemap
*make Engine take Game and Window as references not pointers -> yup
*transform reference -> to object -> yup
*depth function set up strangely
*bug skybox draw after layer->draw? why? and why for depth function better for optimization?
*possible revert changse so it can draw first renderables - yup
*change translation matrix usage in Game.cpp in render method -> yup
framebuffer -> so text is always in front -> yup
cube doesn't work, indices work, normals work, something else maybe? vertices gone wrong? -> yup
eventually take out drawLol and addDataLOL methods stuff -> yup
*implement soyo obj library -> yup
*check if preprocess project properties define for soyo put there -> can't do that, just put into the header file -> yup
*maintain camera code -> yup
*return set float not const float ->  data primitive types -> yup
*setcameraposition get cameraposition -> yup
*disable changing screen sizes -> camera update no projection -> yup
*fix text rending bug -> yup
*text rendering -> yup
*binding textures and unbinding textures, renderable class and stuff	, delete //probably going to be useless stuff, replace code with binary serach algorithm -> yup
*refactor code to have member variables have pointers instead of references -> yup
*doesn't load all meshes without textures, just a color -> yup
*put classes in different folders to organize code -> yup
*refactor code for forward declarations -> yup
*cubemaps -> yup
*light deflection + refraction thing -> yup
*Bind textures properly so that texture and cubemap come together -> Layer.cpp -> yup


difference between returning and setting parameter of const float to float -> no point -> just use float
*Text.cpp compile error -> yup
fix layer class so order matters even when renderable doesn't have a texture (it's nullptr) -> yup
-how to initialize Transform without allocating memory for it -> its fine -> yup
-tester for Textures, materials, yes
-add dictionary for vector, static const values for each type -> yup
-change CubeMapShader name to CubeMap -> yup
-Material reference in Renderable.h - Material Class - texture renderable should have its own copy of texture, how to do this with ref&point; Material has color, light stuff and a pointer to a texture, sepaetare changing stuff and nonchanging stuff -> yup
-find where I use new and make sure I properly deallocate memory -> okay to do so? -> yup
make load any kind of image format -> kinda, prerequisite of no alpha channel image -> yup
transformations with layer -> kinda, don't know what else to do -> yup

******
Later Fixes:

shader -> singleton for each class

change up all the paramters and make them const stuff
getters return const stuff

indices Mesh addData

references by Texture Class

fragmentshader.fs todo, should i use glEnable(GL_TEXTURE2D) and glDisable(GL_TEXTURE2D)

replace input() todo

change up PhongShader and make it a singleton class
make private variables all static

Watch Companion Video on Lighting
Make-> float diffuseFactor = dot(direction, normal); //to see what happens, opposite shading?

Control k+d for all files

change location of uniform variables in phongFragment.fs

phongFragment todo

refactor shader class so methods are all overloaded setUniform
change shader char* parameters to std::string&

make get methods return const values

rename vertices to positions

rename variables in shaders to make it more comprehensible, in texturesVS, out texturesFS

Take out code in TODO in PhongShader.cpp

substitute code from generateDataMatrix() directly into addData() method in Mesh.cpp

make it so that if there is not texture, set it to a single color

why does model * normal make the light stay the same with it?

Delegating constructors in Texture.cpp

change base to baselight

make specularExponent and specularPower consistent

const method is just changing that object right, can still be changing parameter values


*******
Some preconditions that must be satisifed before using this engine:


*******
When Bugs Happen:
READ ALL ERRORS
Consider possiblities of waterfall error

What to do when not drawing anything to the screen:
check uniforms
check size of each collection of data when allocating
generateDataMatrix is wrong
check if its just drawing it not on screen
check normals and vertices size 

ALWAYS REMEMBER TO UNBIND STUFF
-unbind vao's, vbo's, ebo's, textures, etc...