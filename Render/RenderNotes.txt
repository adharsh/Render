TODOS:

Priority To Do List:
*text rendering -> yup
*reflect/refract other renderables too
*explore universe with images thing
*use CUDA with this

disable changing screen sizes
framebuffer thing
multiple objects reflection/refraction
*return set float not const float ->  data primitive types
check if normalCoord and normal is the same thing
cube doesn't work, indices work, normals work, something else maybe? vertices gone wrong?
eventually take out drawLol and addDataLOL methods stuff 
When I pass model matrix to shader, it's actually layer.model  * renderable.model together, that's supposed to happen right?
transform should be a reference to the class, not a pointer; not immediately important
.use texture atlasing for cubemaps
.use texture atlasing for multitude of images
some cool skyboxes: http://virtuallyprogramming.com/Content/Content.html
make getters const even for data primitive types
take out unnecessary includdes like iostream and gl/glew.h
possible to make alterRenderable() or getRenderable() more efficient?
-make a framebuffer

post processing stuff -> hud - text + fonts, other interactable stuff -> https://www.opengl.org/discussion_boards/showthread.php/124875-How-to-draw-a-line-using-OpenGL-programme, https://learnopengl.com/#!In-Practice/Text-Rendering, https://learnopengl.com/#!Advanced-OpenGL/Framebuffers
loads obj uvs, but uvs are messed up -> next meeting; -> http://blender.stackexchange.com/questions/1022/adding-uv-mapping-to-mesh, https://en.wikibooks.org/wiki/Blender_3D:_Noob_to_Pro/UV_Map_Basics
msaa in OpenGL etc. -> https://learnopengl.com/#!Advanced-OpenGL/Anti-Aliasing
sounds -> https://learnopengl.com/#!In-Practice/2D-Game/Audio -> Irrklang
should game and window in Engine.h be const, should Game methods be const too, effects throughout code okay?
browser -> http://kripken.github.io/emscripten-site/

fix change fov scroll in
change scrolling so it stays the same even when cursor is out of focus

passing Tim::getDelta() as a double vs a float vs something even more accurate

Not necessary to do pointlights/spot lights, just as final touches
-way to organize point lights in vector -> 
getters for position
popthem off
add them back on
-pointlights don't entirely work

spot lights

******
Yups:
*binding textures and unbinding textures, renderable class and stuff	, delete //probably going to be useless stuff, replace code with binary serach algorithm -> yup
*refactor code to have member variables have pointers instead of references -> yup
*doesn't load all meshes without textures, just a color -> yup
*put classes in different folders to organize code -> yup
*refactor code for forward declarations -> yup
*cubemaps -> yup
*light deflection + refraction thing -> yup
*Bind textures properly so that texture and cubemap come together -> Layer.cpp -> yup


difference between returning and setting parameter of const float to float -> no point -> just use float
*Text.cpp compile error -> yup
fix layer class so order matters even when renderable doesn't have a texture (it's nullptr) -> yup
-how to initialize Transform without allocating memory for it -> its fine -> yup
-tester for Textures, materials, yes
-add dictionary for vector, static const values for each type -> yup
-change CubeMapShader name to CubeMap -> yup
-Material reference in Renderable.h - Material Class - texture renderable should have its own copy of texture, how to do this with ref&point; Material has color, light stuff and a pointer to a texture, sepaetare changing stuff and nonchanging stuff -> yup
-find where I use new and make sure I properly deallocate memory -> okay to do so? -> yup
make load any kind of image format -> kinda, prerequisite of no alpha channel image -> yup
transformations with layer -> kinda, don't know what else to do -> yup

******
Later Fixes:

change up all the paramters and make them const stuff
getters return const stuff

indices Mesh addData

references by Texture Class

fragmentshader.fs todo, should i use glEnable(GL_TEXTURE2D) and glDisable(GL_TEXTURE2D)

replace input() todo

change up PhongShader and make it a singleton class
make private variables all static

Watch Companion Video on Lighting
Make-> float diffuseFactor = dot(direction, normal); //to see what happens, opposite shading?

Control k+d for all files

change location of uniform variables in phongFragment.fs

phongFragment todo

refactor shader class so methods are all overloaded setUniform
change shader char* parameters to std::string&

make get methods return const values

rename vertices to positions

rename variables in shaders to make it more comprehensible, in texturesVS, out texturesFS

Take out code in TODO in PhongShader.cpp

substitute code from generateDataMatrix() directly into addData() method in Mesh.cpp

make it so that if there is not texture, set it to a single color

why does model * normal make the light stay the same with it?

Delegating constructors in Texture.cpp

change base to baselight

make specularExponent and specularPower consistent

const method is just changing that object right, can still be changing parameter values


*******
Some preconditions that must be satisifed before using this engine:


*******
When Bugs Happen:
READ ALL ERRORS
Consider possiblities of waterfall error

What to do when not drawing anything to the screen:
check uniforms
check size of each collection of data when allocating
generateDataMatrix is wrong
check if its just drawing it not on screen
check normals and vertices size 

ALWAYS REMEMBER TO UNBIND STUFF
-unbind vao's, vbo's, ebo's, textures, etc...